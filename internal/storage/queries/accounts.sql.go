// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: accounts.sql

package queries

import (
	"context"

	decimal "github.com/shopspring/decimal"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (client_id, currency) VALUES ($1, $2) RETURNING id, client_id, balance, currency
`

type CreateAccountParams struct {
	ClientID int32          `db:"client_id" json:"client_id"`
	Currency CurrencyTicker `db:"currency" json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (*Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.ClientID, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.Balance,
		&i.Currency,
	)
	return &i, err
}

const depositToAccount = `-- name: DepositToAccount :exec
UPDATE accounts SET balance = balance + $1 WHERE id = $2
`

type DepositToAccountParams struct {
	Amount    decimal.Decimal `db:"amount" json:"amount"`
	AccountID int32           `db:"account_id" json:"account_id"`
}

func (q *Queries) DepositToAccount(ctx context.Context, arg DepositToAccountParams) error {
	_, err := q.db.ExecContext(ctx, depositToAccount, arg.Amount, arg.AccountID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, client_id, balance, currency FROM accounts WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int32) (*Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.Balance,
		&i.Currency,
	)
	return &i, err
}

const withdrawFromAccount = `-- name: WithdrawFromAccount :exec
UPDATE accounts SET balance = balance - $1 WHERE id = $2
`

type WithdrawFromAccountParams struct {
	Amount    decimal.Decimal `db:"amount" json:"amount"`
	AccountID int32           `db:"account_id" json:"account_id"`
}

func (q *Queries) WithdrawFromAccount(ctx context.Context, arg WithdrawFromAccountParams) error {
	_, err := q.db.ExecContext(ctx, withdrawFromAccount, arg.Amount, arg.AccountID)
	return err
}
