// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: transactions.sql

package queries

import (
	"context"

	decimal "github.com/shopspring/decimal"
)

const createDepositTransaction = `-- name: CreateDepositTransaction :one
INSERT INTO transactions (type, amount, to_account_id) VALUES ('deposit', $1, $2::integer) RETURNING id, type, amount, from_account_id, to_account_id, created_at
`

type CreateDepositTransactionParams struct {
	Amount    decimal.Decimal `db:"amount" json:"amount"`
	AccountID int32           `db:"account_id" json:"account_id"`
}

func (q *Queries) CreateDepositTransaction(ctx context.Context, arg CreateDepositTransactionParams) (*Transaction, error) {
	row := q.db.QueryRowContext(ctx, createDepositTransaction, arg.Amount, arg.AccountID)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Amount,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.CreatedAt,
	)
	return &i, err
}

const createTransferTransaction = `-- name: CreateTransferTransaction :one
INSERT INTO transactions (type, amount, from_account_id, to_account_id) VALUES ('transfer', $1, $2::integer, $3::integer) RETURNING id, type, amount, from_account_id, to_account_id, created_at
`

type CreateTransferTransactionParams struct {
	Amount        decimal.Decimal `db:"amount" json:"amount"`
	FromAccountID int32           `db:"from_account_id" json:"from_account_id"`
	ToAccountID   int32           `db:"to_account_id" json:"to_account_id"`
}

func (q *Queries) CreateTransferTransaction(ctx context.Context, arg CreateTransferTransactionParams) (*Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransferTransaction, arg.Amount, arg.FromAccountID, arg.ToAccountID)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Amount,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.CreatedAt,
	)
	return &i, err
}

const createWithdrawTransaction = `-- name: CreateWithdrawTransaction :one
INSERT INTO transactions (type, amount, from_account_id) VALUES ('withdraw', $1, $2::integer) RETURNING id, type, amount, from_account_id, to_account_id, created_at
`

type CreateWithdrawTransactionParams struct {
	Amount    decimal.Decimal `db:"amount" json:"amount"`
	AccountID int32           `db:"account_id" json:"account_id"`
}

func (q *Queries) CreateWithdrawTransaction(ctx context.Context, arg CreateWithdrawTransactionParams) (*Transaction, error) {
	row := q.db.QueryRowContext(ctx, createWithdrawTransaction, arg.Amount, arg.AccountID)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Amount,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.CreatedAt,
	)
	return &i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, type, amount, from_account_id, to_account_id, created_at
FROM transactions
WHERE from_account_id = $1::integer
    OR to_account_id = $1::integer
`

func (q *Queries) ListTransactions(ctx context.Context, accountID int32) ([]*Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Amount,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
